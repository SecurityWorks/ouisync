import org.jetbrains.dokka.gradle.DokkaTask


plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id "maven-publish"
    id "org.jetbrains.dokka" version '1.9.0'
    id "org.jetbrains.kotlinx.kover" version "0.9.1"
    id "org.mozilla.rust-android-gradle.rust-android" version '0.9.4'
    id "signing"
}

Properties localProperties = new Properties()

def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())
}

version = rootProject.version
group   = rootProject.group

android {
    namespace 'org.equalitie.ouisync.lib'

    compileSdk = 34
    ndkVersion = '27.2.12479018'

    sourceSets {
        main {
            kotlin {
                // Add directory with generated source files
                srcDir layout.buildDirectory.dir('gen')
            }
        }
    }

    defaultConfig {
        targetSdkVersion 34
        minSdkVersion 26
        versionCode 1
        versionName version
    }

    kotlin {
        jvmToolchain(17)
    }

    testOptions {
        unitTests.all {
            testLogging {
                showStandardStreams true
                exceptionFormat "full"
            }
        }
    }
}

dependencies {
    def jna = 'net.java.dev.jna:jna:5.13.0'

    // We want the 'aar' version so the 'jnidispatch' lib gets bundled into the resulting aar.
    implementation "${jna}@aar"

    // For test we also want the non-aar version so the 'jnidispatch' lib gets put on the classpath
    testImplementation jna

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0'
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.6.2"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.8.0"
    implementation 'org.msgpack:msgpack-core:0.9.5'

    testImplementation "junit:junit:4.13"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0'
}

cargo {
    module = "$rootDir/../.."
    libname = 'ouisync_service'

    // Targets can be overriden with "rust.targets" in local.properties.
    // Example: "rust.targets=arm64,x86_64".
    // More info: https://github.com/mozilla/rust-android-gradle.
    targets = ['arm', 'arm64', /* 'x86', */ 'x86_64']

    profile = 'release'

    extraCargoBuildArguments = ['--package', 'ouisync-service']

    def relTargetDir = localProperties.getProperty('rust.cargoTargetDir')
    def absTargetDir = null

    if (relTargetDir != null) {
        if ((new File(relTargetDir)).isAbsolute()) {
            absTargetDir = relTargetDir
        } else {
            absTargetDir = "$projectDir/$relTargetDir"
        }
    }

    exec { spec, toolchain ->
        // HACK: rust.cargoTargetDir local property is not passed to cargo for some reason
        // (https://github.com/mozilla/rust-android-gradle?tab=readme-ov-file#targetdirectory).
        // Force it:
        if (absTargetDir != null) {
            spec.environment('CARGO_TARGET_DIR', absTargetDir)
        }
    }
}

tasks.register('generateBindings', Exec) {
    description 'Generate bindings'
    workingDir "$rootDir/../.."
    commandLine 'cargo', 'run', '--package', 'ouisync-bindgen', '--', '--language', 'kotlin'

    doFirst {
        def dir = layout.buildDirectory.dir('gen').get().getAsFile()
        mkdir(dir)
        standardOutput = new FileOutputStream("$dir/Bindings.kt")
    }
}

tasks.register('cargoBuildUnitTest', Exec) {
    description 'Build the native library for unit tests'
    workingDir "$rootDir/../.."
    commandLine 'cargo', 'build', '--package', 'ouisync-service', '--lib'
}

tasks.withType(DokkaTask) {
    dokkaSourceSets {
        configureEach {
            includes.from("docs/module.md")
        }
    }

    moduleName.set("ouisync")

    def dokkaBaseConfiguration = """
    {
        "customAssets":      ["${file("docs/logo-icon.png")}"],
        "customStyleSheets": ["${file("docs/logo-styles.css")}"],
        "footerMessage":     "Copyright (c) 2024 <a href=\\\"https://equalit.ie/\\\">eQualitie</a> | <a href=\\\"https://ouisync.net\\\">Ouisync website</a> | <a href=\\\"https://github.com/equalitie/ouisync\\\">Ouisync git repository</a>"
    }
    """

    pluginsMapConfiguration.set([
        "org.jetbrains.dokka.base.DokkaBase": dokkaBaseConfiguration,
    ])
}

afterEvaluate {
    android.libraryVariants.each {
        def variant  = it.name.capitalize()

        // Generate bindings before compiling the kotlin sources. This happens during both
        // 'assemble' and 'test'.
        tasks.named("compile${variant}Kotlin") {
            dependsOn 'generateBindings'
        }

        // Build the native library for tha target android platforms. This happens only during
        // 'assemble'
        tasks.named("merge${variant}JniLibFolders") {
            dependsOn 'cargoBuild'
        }

        // Built the native library for the host platform and set 'jna.library.path' to point to
        // it. This happens only during 'test'.
        tasks.named("test${variant}UnitTest") {
            dependsOn 'cargoBuildUnitTest'
            systemProperty('jna.library.path', "$rootDir/../../target/debug")
        }
    }

    tasks.named("dokkaHtml") {
        dependsOn 'generateBindings'
    }

    publishing {
        publications {
            release(MavenPublication) {
                def packageName = "${rootProject.name}-omni"

                from(components.release)

                artifactId packageName

                pom {
                    name = packageName
                    description = "Library for secure peer-to-peer file syncing"
                    url = 'https://github.com/equalitie/ouisync'
                    licenses {
                        license {
                            name = 'MPL-2.0'
                            url = 'https://github.com/equalitie/ouisync/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            name = 'Ouisync Developers'
                            email = 'ouisync@equalit.ie'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/equalitie/ouisync.git'
                        developerConnection = 'scm:git:ssh://github.com/equalitie/ouisync.git'
                        url = 'https://github.com/equalitie/ouisync/tree/master'
                    }
                }
            }
        }
    }
}

signing {
    // Only sign when publishing to sonatype, not local
    required {
        gradle.taskGraph.hasTask("lib:publishToSonatype")
    }

    if (signingKey) {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    }

    sign publishing.publications
}

