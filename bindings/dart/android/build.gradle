buildscript {
    ext.kotlin_version = "2.0.20"
    repositories {
        google()
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.7.2")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

plugins {
    id "com.android.library"
    id "kotlin-android"
    id "org.mozilla.rust-android-gradle.rust-android" version '0.9.4'
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

group = "org.equalitie.ouisync.lib"
version = "1.0-SNAPSHOT"

android {
    if (project.android.hasProperty("namespace")) {
        namespace = "org.equalitie.ouisync.lib"
    }

    compileSdk = 34
    ndkVersion = '27.2.12479018'

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
        targetSdkVersion = 34
    }

    kotlin {
        jvmToolchain(17)
    }

    buildTypes {
        debug {
            android.packagingOptions.doNotStrip '**.so'
        }
        profile {
        }
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.10.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}

def abiTargets = {
    if (project.hasProperty("target-platform")) {
        // https://github.com/flutter/flutter/blob/37dbe030feb47cdf15f3d4c1921857dbbac8aedf/packages/flutter_tools/gradle/flutter.gradle#L78-L82
        return project.property("target-platform").split(',').collect{
            if (it == "android-arm") {
                return "arm"
            } else if (it == "android-arm64") {
                return "arm64"
            } else if (it == "android-x86") {
                return "x86"
            } else if (it == "android-x64") {
                return "x86_64"
            } else {
                println("Unknown target platform: " + it)
                System.exit(1)
            }
        }
    }
    else {
        // NOTE: x86 is not added by default when invoking `flutter build aar`
        // so we don't include it here neither.
        return ["arm", "arm64", /* "x86", */ "x86_64"]
    }
}()

cargo {
    // MacOS no longer has `python` (only has `python3`) and `python3` is present on all other
    // systems.
    pythonCommand = "python3"
    module = "../../.."
    libname = "ouisync_service"
    targets = abiTargets
    profile = gradle.startParameter.taskNames.any{it.toLowerCase().contains("debug")} ? "debug" : "release"

    extraCargoBuildArguments = ['-p', 'ouisync-service']
}

preBuild.dependsOn 'cargoBuild'
