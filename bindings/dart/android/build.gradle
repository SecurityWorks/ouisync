buildscript {
    ext.kotlin_version = "2.1.20"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:8.10.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "com.diffplug.spotless" version "7.0.3"
}

allprojects {
    repositories {
        google()
        mavenLocal()
        mavenCentral()
    }
}

group = "org.equalitie.ouisync.dart"
version = "1.0-SNAPSHOT"

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    if (project.android.hasProperty("namespace")) {
        namespace = "org.equalitie.ouisync.dart"
    }

    compileSdk = 35
    ndkVersion = '27.2.12479018'

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 23
        targetSdk = 35
    }

    kotlin {
        jvmToolchain(17)
    }

    buildTypes {
        debug {
            android.packagingOptions.doNotStrip '**.so'
        }
        profile {
        }
    }

    dependencies {
        implementation        'ie.equalit.ouinet:ouisync-client:+'
        debugImplementation   'ie.equalit.ouinet:ouisync-server-debug:+'
        releaseImplementation 'ie.equalit.ouinet:ouisync-server:+'

        implementation 'androidx.datastore:datastore-preferences:1.1.7'

        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.10.0'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}

afterEvaluate {
    def rustTargets = project.findProperty('target-platform')?.split(',').collect {
        // https://github.com/flutter/flutter/blob/37dbe030feb47cdf15f3d4c1921857dbbac8aedf/packages/flutter_tools/gradle/flutter.gradle#L78-L82
        switch (it) {
            case 'android-arm':   return 'arm'
            case 'android-arm64': return 'arm64'
            case 'android-x86':   return 'x86'
            case 'android-x64':   return 'x86_64'
            default: throw new IllegalArgumentException("unknown target platform: $it")
        }
    }

    android.libraryVariants.each {
        def variant = it.name.capitalize()

        // Build kotlin bindings and publish them to a local maven repository.
        tasks.register("build${variant}KotlinBindings", GradleBuild) {
            dir = "${projectDir}/../../kotlin"
            tasks = [
                "publishClientPublicationToMavenLocal",
                "publish${variant}ServerPublicationToMavenLocal".toString(),
            ]

            // Pass the rust targets from flutter.
            if (rustTargets != null) {
                startParameter.projectProperties = [
                    'rust-targets': rustTargets.join(',')
                ]
            }
        }

        tasks.named("pre${variant}Build") {
            dependsOn "build${variant}KotlinBindings"
        }
    }
}

spotless {
    kotlin {
        target("**/*.kt")
        ktfmt()
        ktlint()
    }
}
